m_train = train_set_y.shape[1]
m_test = test_set_y.shape[1]
num_px = train_set_x_orig.shape[1]

train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T
test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T

s = 1 / (1 + np.exp(-z))

w = np.zeros(shape=(dim, 1))
b = 0

A = sigmoid(np.dot(w.T, X) + b)  # compute activation
cost = (- 1 / m) * np.sum(Y * np.log(A) + (1 - Y) * (np.log(1 - A)))  # compute cost

dw = (1 / m) * np.dot(X, (A - Y).T)
db = (1 / m) * np.sum(A - Y)

grads, cost = propagate(w, b, X, Y)

w = w - learning_rate * dw  # need to broadcast
b = b - learning_rate * db

A = sigmoid(np.dot(w.T, X) + b)

Y_prediction[0, i] = 1 if A[0, i] > 0.5 else 0

w, b = initialize_with_zeros(X_train.shape[0])

parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)

Y_prediction_test = predict(w, b, X_test)
    Y_prediction_train = predict(w, b, X_train)

my_image = "my_image.jpg" 